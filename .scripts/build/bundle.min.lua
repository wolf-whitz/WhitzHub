local __mod0 = (function() local Players = game:GetService("Players") local RunService = game:GetService("RunService") local LocalPlayer = Players.LocalPlayer local Camera = workspace.CurrentCamera local module = {} local highlights = {} local function isAlive(player) local char = player.Character if not char or not char:IsDescendantOf(workspace) then return false end local humanoid = char:FindFirstChildWhichIsA("Humanoid") return humanoid and humanoid.Health > 0 end local function isEnemy(player) if player == LocalPlayer then return false end if not module.ESP_ALL and module.ENABLE_TEAM_CHECK and player.Team == LocalPlayer.Team then return false end return isAlive(player) end local function predictPosition(part) local vel = part.Velocity or Vector3.new() local dist = (part.Position - Camera.CFrame.Position).Magnitude local bulletSpeed = 300 local travelTime = dist / bulletSpeed return part.Position + vel * travelTime * (module.PREDICTION_FACTOR or 0) end function module:GetClosestTarget() if not module.AIM_ASSIST then return nil end local closest, dist = nil, module.FIELD_OF_VIEW or 0 for _, player in ipairs(Players:GetPlayers()) do if isEnemy(player) then local part = player.Character:FindFirstChild(module.TARGET_PART) or player.Character:FindFirstChild("Head") if part then local predictedPos = predictPosition(part) local screenPos, onScreen = Camera:WorldToViewportPoint(predictedPos) if onScreen then local mag = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)).Magnitude if mag < dist then dist = mag closest = player end end end end end return closest end function module:ApplyAim(target) if not module.AIM_ASSIST then return end if not target or not target.Character then return end local part = target.Character:FindFirstChild(module.TARGET_PART) or target.Character:FindFirstChild("Head") if not part then return end local predictedPos = predictPosition(part) local goal = (predictedPos - Camera.CFrame.Position).Unit Camera.CFrame = CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + (Camera.CFrame.LookVector:Lerp(goal, module.AIM_SMOOTHNESS or 0)).Unit) end RunService.RenderStepped:Connect(function() for _, player in ipairs(Players:GetPlayers()) do if isEnemy(player) then if not highlights[player] then local hl = Instance.new("Highlight") hl.Adornee = player.Character hl.FillColor = Color3.fromRGB(255,0,0) hl.FillTransparency = 0.5 hl.OutlineColor = Color3.fromRGB(255,0,0) hl.OutlineTransparency = 0 hl.Parent = workspace highlights[player] = hl end highlights[player].Enabled = module.HIGHLIGHT_ENABLED elseif highlights[player] then highlights[player].Enabled = false end end end) return module  end)() local __mod1 = (function() local Players = game:GetService("Players") local LocalPlayer = Players.LocalPlayer local RunService = game:GetService("RunService") local module = {} module.AUTO_SHOOT = true module.TRIGGER_WHILE_AIMING = true module.SHOOT_INTERVAL = 0.03 local mouse = LocalPlayer:GetMouse() local userShooting = false local currentTarget = nil local lastShot = 0 mouse.Button1Down:Connect(function() userShooting = true end) mouse.Button1Up:Connect(function() userShooting = false end) function module:UpdateTarget(target) currentTarget = target end RunService.RenderStepped:Connect(function(delta) if not module.AUTO_SHOOT then return end if module.TRIGGER_WHILE_AIMING and not userShooting then return end if not currentTarget or not currentTarget.Character then return end local humanoid = currentTarget.Character:FindFirstChildWhichIsA("Humanoid") if humanoid and humanoid.Health > 0 then lastShot = lastShot + delta if lastShot >= module.SHOOT_INTERVAL then mouse1press() task.wait(0.01) mouse1release() lastShot = 0 end end end) return module  end)() local __mod2 = (function() local Players = game:GetService("Players") local UserInputService = game:GetService("UserInputService") local LocalPlayer = Players.LocalPlayer local module = {} function module:CreateGUI() local ScreenGui = Instance.new("ScreenGui") ScreenGui.Name = "SmartAimbotGUI" ScreenGui.ResetOnSpawn = false ScreenGui.IgnoreGuiInset = true ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui") local MainFrame = Instance.new("Frame", ScreenGui) MainFrame.Size = UDim2.new(0, 240, 0, 440) MainFrame.Position = UDim2.new(0, 20, 0, 50) MainFrame.BackgroundColor3 = Color3.fromRGB(30,30,30) MainFrame.Active = true Instance.new("UICorner", MainFrame).CornerRadius = UDim.new(0,8) local function createToggle(labelText, default, position) local Label = Instance.new("TextLabel", MainFrame) Label.Text = labelText Label.Size = UDim2.new(0,120,0,24) Label.Position = position Label.TextColor3 = Color3.new(1,1,1) Label.BackgroundTransparency = 1 Label.Font = Enum.Font.Gotham Label.TextSize = 14 local Toggle = Instance.new("TextButton", MainFrame) Toggle.Size = UDim2.new(0,60,0,24) Toggle.Position = UDim2.new(0,130,0,position.Y.Offset) Toggle.Text = default and "ON" or "OFF" Toggle.BackgroundColor3 = default and Color3.fromRGB(80,140,255) or Color3.fromRGB(60,60,60) Toggle.TextColor3 = Color3.new(1,1,1) Toggle.Font = Enum.Font.Gotham Toggle.TextSize = 14 Toggle.Active = true Toggle.MouseButton1Click:Connect(function() default = not default Toggle.Text = default and "ON" or "OFF" Toggle.BackgroundColor3 = default and Color3.fromRGB(80,140,255) or Color3.fromRGB(60,60,60) end) return Label, Toggle, function() return default end end local AIMLabel, AIMToggle = createToggle("Aim Assist", true, UDim2.new(0,10,0,10)) local ShootLabel, ShootToggle = createToggle("Auto Shoot", false, UDim2.new(0,10,0,50)) local TeamLabel, TeamToggle = createToggle("Enemy Team Only", true, UDim2.new(0,10,0,90)) local ESPLabel, ESPToggle = createToggle("ESP Mode (All/Enemies)", true, UDim2.new(0,10,0,130)) local PartLabel = Instance.new("TextLabel", MainFrame) PartLabel.Text = "Target Part" PartLabel.Size = UDim2.new(0,120,0,24) PartLabel.Position = UDim2.new(0,10,0,170) PartLabel.TextColor3 = Color3.new(1,1,1) PartLabel.BackgroundTransparency = 1 PartLabel.Font = Enum.Font.Gotham PartLabel.TextSize = 14 local partOptions = {"Head", "HumanoidRootPart", "Torso", "UpperTorso", "LowerTorso"} local PartDropdown = Instance.new("TextButton", MainFrame) PartDropdown.Size = UDim2.new(0,100,0,24) PartDropdown.Position = UDim2.new(0,130,0,170) PartDropdown.Text = partOptions[1] PartDropdown.BackgroundColor3 = Color3.fromRGB(60,60,60) PartDropdown.TextColor3 = Color3.new(1,1,1) PartDropdown.Font = Enum.Font.Gotham PartDropdown.TextSize = 14 PartDropdown.Active = true local DropdownFrame = Instance.new("Frame", PartDropdown) DropdownFrame.Size = UDim2.new(1,0,0,0) DropdownFrame.Position = UDim2.new(0,0,1,0) DropdownFrame.BackgroundColor3 = Color3.fromRGB(40,40,40) DropdownFrame.ClipsDescendants = true DropdownFrame.Active = true local buttons = {} for i, option in ipairs(partOptions) do local btn = Instance.new("TextButton", DropdownFrame) btn.Size = UDim2.new(1,0,0,24) btn.Position = UDim2.new(0,0,0,(i-1)*24) btn.Text = option btn.BackgroundColor3 = Color3.fromRGB(50,50,50) btn.TextColor3 = Color3.new(1,1,1) btn.Font = Enum.Font.Gotham btn.TextSize = 14 btn.Active = true btn.MouseButton1Click:Connect(function() PartDropdown.Text = option DropdownFrame.Size = UDim2.new(1,0,0,0) dropdownOpen = false end) table.insert(buttons, btn) end local dropdownOpen = false PartDropdown.MouseButton1Click:Connect(function() if dropdownOpen then DropdownFrame.Size = UDim2.new(1,0,0,0) else DropdownFrame.Size = UDim2.new(1,0,#partOptions*24,0) end dropdownOpen = not dropdownOpen end) UserInputService.InputBegan:Connect(function(input, processed) if processed then return end if input.UserInputType == Enum.UserInputType.MouseButton1 then local mousePos = UserInputService:GetMouseLocation() local framePos = MainFrame.AbsolutePosition local frameSize = MainFrame.AbsoluteSize if not (mousePos.X >= framePos.X and mousePos.X <= framePos.X+frameSize.X and mousePos.Y >= framePos.Y and mousePos.Y <= framePos.Y+frameSize.Y) then DropdownFrame.Size = UDim2.new(1,0,0,0) dropdownOpen = false end end end) local function createIncrementControl(labelText, min, max, default, position, step) local Label = Instance.new("TextLabel", MainFrame) Label.Text = labelText .. ": " .. tostring(default) Label.Size = UDim2.new(0,120,0,24) Label.Position = position Label.TextColor3 = Color3.new(1,1,1) Label.BackgroundTransparency = 1 Label.Font = Enum.Font.Gotham Label.TextSize = 14 local MinusBtn = Instance.new("TextButton", MainFrame) MinusBtn.Size = UDim2.new(0,24,0,24) MinusBtn.Position = UDim2.new(0,130,0,position.Y.Offset) MinusBtn.Text = "-" MinusBtn.BackgroundColor3 = Color3.fromRGB(60,60,60) MinusBtn.TextColor3 = Color3.new(1,1,1) MinusBtn.Font = Enum.Font.Gotham MinusBtn.TextSize = 18 local PlusBtn = Instance.new("TextButton", MainFrame) PlusBtn.Size = UDim2.new(0,24,0,24) PlusBtn.Position = UDim2.new(0,160,0,position.Y.Offset) PlusBtn.Text = "+" PlusBtn.BackgroundColor3 = Color3.fromRGB(60,60,60) PlusBtn.TextColor3 = Color3.new(1,1,1) PlusBtn.Font = Enum.Font.Gotham PlusBtn.TextSize = 18 local value = default local function updateLabel() Label.Text = labelText .. ": " .. string.format("%.2f", value) end MinusBtn.MouseButton1Click:Connect(function() value = math.clamp(value - step, min, max) updateLabel() end) PlusBtn.MouseButton1Click:Connect(function() value = math.clamp(value + step, min, max) updateLabel() end) return {Label = Label, Minus = MinusBtn, Plus = PlusBtn, getValue = function() return value end} end local AimSmoothControl = createIncrementControl("Aim Smooth", 0, 1, 0.1, UDim2.new(0,10,0,210), 0.01) local FOVControl = createIncrementControl("Field of View", 50, 500, 250, UDim2.new(0,10,0,250), 5) local PredictionControl = createIncrementControl("Prediction", 0, 1, 0.5, UDim2.new(0,10,0,290), 0.01) local dragging, dragInput, dragStart, startPos local function update(input) local delta = input.Position - dragStart MainFrame.Position = UDim2.new( startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y ) end MainFrame.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = true dragStart = input.Position startPos = MainFrame.Position input.Changed:Connect(function() if input.UserInputState == Enum.UserInputState.End then dragging = false end end) end end) MainFrame.InputChanged:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then dragInput = input end end) UserInputService.InputChanged:Connect(function(input) if input == dragInput and dragging then update(input) end end) return { AIMToggle = AIMToggle, ShootToggle = ShootToggle, TeamToggle = TeamToggle, ESPToggle = ESPToggle, PartDropdown = PartDropdown, AimSmoothControl = AimSmoothControl, FOVControl = FOVControl, PredictionControl = PredictionControl } end return module  end)() local __mod3 = (function() local RunService = game:GetService("RunService") local Players = game:GetService("Players") local LocalPlayer = Players.LocalPlayer local GUI = __mod2 local Aimbot = __mod0 local AutoShoot = __mod1 local toggles = GUI:CreateGUI() local function getToggleValue(toggle) if toggle and toggle.Text then return toggle.Text == "ON" end return false end local function updateAimbotFromGUI() Aimbot.AIM_ASSIST = getToggleValue(toggles.AIMToggle) AutoShoot.AUTO_SHOOT = getToggleValue(toggles.ShootToggle) Aimbot.ENABLE_TEAM_CHECK = getToggleValue(toggles.TeamToggle) Aimbot.HIGHLIGHT_ENABLED = getToggleValue(toggles.ESPToggle) if toggles.AimSmoothControl then Aimbot.AIM_SMOOTHNESS = toggles.AimSmoothControl.getValue() end if toggles.FOVControl then Aimbot.FIELD_OF_VIEW = toggles.FOVControl.getValue() end if toggles.PredictionControl then Aimbot.PREDICTION_FACTOR = toggles.PredictionControl.getValue() end if toggles.PartDropdown and toggles.PartDropdown.Text then Aimbot.TARGET_PART = toggles.PartDropdown.Text end end RunService.RenderStepped:Connect(function(delta) updateAimbotFromGUI() local target = Aimbot:GetClosestTarget() if target and Aimbot.AIM_ASSIST then Aimbot:ApplyAim(target) end AutoShoot:UpdateTarget(target) end)  end)()